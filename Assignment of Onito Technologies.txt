Name :- Ankit Soni
Contact number :- 7000391436
Email :- ankitsoni8982858495@gmail.com




1)	Create SQL Tables `movies` & `ratings`, and populate the CSV data into them.

Answer :-

create database Ankit;
use Ankit;
create table movies (tconst varchar(20) , titleType varchar(30), primaryTitle varchar(60) , runtimeMinutes int , generes varchar(60), averageRating float(10) , numVotes float(10));
INSERT INTO movies (tconst,titleType , primaryTitle, runtimeMinutes ,generes, averageRating,numVotes )
VALUES ('tt0000001' , 'short' , 'Carmencita','1','Documentary', '5.7','1911'),
('tt0000002' , 'movie' , 'Le clown et ses chiens','5','Animation', '5.8','257'),
('tt0000003' , 'short' , 'Pauvre Plerrot','4','Animation', '6.5','1716')
 ('tt0000004' , 'short' , 'Un Bon Bock','12','Animation', '5.6','169') ,
 ('tt0000005' , 'short' , 'Blacksmith Scence','1','Comedy', '6.2','2532') , 
('tt0000006' , 'short' , 'Chinese Opium Den','1','short', '5.1','173') ,
('tt0000007' , 'short' , 'Corbett and courtney before the kinetog','1','short', '5.4','790'),
 ('tt0000008' , 'movie' , 'Edison Kinetoscopic Record of a Snneze','1','Documentary', '5.4','2054'),
 ('tt0000009' , 'movie' , 'Miss Jerry','45','Romance','Animation', '5.2','199') 
 , ('tt0000010' , 'short' , 'Leaving The Factory','1','Action', '6.9','6929');

2)	Create an HTTP server with the following routes
a)	GET /api/v1/longest-duration-movies
This route returns as JSON the top 10 movies with the longest runTime The output should contain tconst, primaryTitle, runtimeMinutes & genres
 
b)	POST /api/v1/new-movie
This route takes JSON as input for new movie and saves it into the database On successful save, it returns “success”

c)	[BONUS QUESTION]
GET /api/v1/top-rated-movies
This route returns as JSON the movies with an averageRating > 6.0, in sorted order by averageRating
The output should contain tconst, primaryTitle, genre & averageRating.

Answer:

// Create an HTTP server
const express = require('express');
const app = express();

// GET /api/v1/longest-duration-movies
app.get('/api/v1/longest-duration-movies', (req, res) => {
  let sql =
    'SELECT tconst, primaryTitle, runtimeMinutes, genres FROM movies ORDER BY runtimeMinutes DESC LIMIT 10';
  db.query(sql, (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.json(result);
    }
  });
});

// POST /api/v1/new-movie
app.post('/api/v1/new-movie', (req, res) => {
  let data = {
    tconst: req.body.tconst,
    titleType: req.body.titleType,
    primaryTitle: req.body.primaryTitle,
    runtimeMinutes: req.body.runtimeMinutes,
    genres: req.body.genres,
    averageRating: req.body.averageRating,
    numVotes: req.body.numVotes
  };

  let sql = 'INSERT INTO movies SET ?';
  db.query(sql, data, (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.json({message: 'success'});
    }
  });
});

// GET /api/v1/top-rated-movies
app.get('/api/v1/top-rated-movies', (req, res) => {
  let sql =
    'SELECT tconst, primaryTitle, genres, averageRating FROM movies WHERE averageRating > 6.0 ORDER BY averageRating DESC';
  db.query(sql, (err, result) => {
    if (err) {
      console.log(err);
    } else {
      res.json(result);
    }
  });
});

// Start server
app.listen(4000, () => {
  console.log('Server started on port 4000');
});
